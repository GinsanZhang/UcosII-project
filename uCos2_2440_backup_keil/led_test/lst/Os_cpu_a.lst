


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       **************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                          (c) Copyright 1992-2003, Jean
                        J. Labrosse, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           
    9 00000000         ;
   10 00000000         ; File    : os_cpu_a.s 
   11 00000000         ; History : 
   12 00000000         ;  OSCtxSw(), OSIntCtxSw()  OSStartHighRdy() OS_CPU_IRQ_
                       ISR() OSTickISR()
   13 00000000         ;*******************************************************
                       ************************************************* */
   14 00000000         
   15 00000000 4A000000 
                       SRCPND  EQU              0x4a000000  ; Ô´Î´¾ö¼Ä´æÆ÷ µ±Ò»
                                                            ¸öÖÐ¶Ï·¢Éúºó£¬ÄÇÃ´Ï
                                                            àÓ¦µÄÎ»»á±»ÖÃ1£¬±íÊ
                                                            ¾Ò»¸ö»òÒ»ÀàÖÐ¶Ï·¢Éú
                                                            ÁË¡£
   16 00000000 4A000010 
                       INTPND  EQU              0x4a000010  ; ÖÐ¶ÏÎ´¾ö¼Ä´æÆ÷ ÖÐ
                                                            ¶Ï·¢Éúºó£¬SRCPNDÖÐ»
                                                            áÓÐÎ»ÖÃ1£¬¿ÉÄÜºÃ¼¸¸
                                                            ö£¨ÒòÎªÍ¬Ê±¿ÉÄÜ·¢Éú
                                                            ¼¸¸öÖÐ¶Ï£©£¬
   17 00000000         ;ÕâÐ©ÖÐ¶Ï»áÓÉÓÅÏÈ¼¶ÖÙ²ÃÆ÷Ñ¡³öÒ»¸ö×î½ôÆÈµÄ£¬È»ºó°É°ÑINTPN
                       DÖÐÏàÓ¦Î»ÖÃ1£¬ËùÒÔÍ¬Ò»Ê±¼äÖ»ÓÐÒ»Î»ÊÇ1¡£
   18 00000000         ;Ò²¾ÍÊÇËµÇ°ÃæµÄ¼Ä´æÆ÷ÖÃ1ÊÇ±íÊ¾·¢ÉúÁË£¬Ö»ÓÐINTPNDÖÃ1£¬CPU
                       ²Å»á´¦Àí¡£
   19 00000000         
   20 00000000 560000A8 
                       rEINTPEND
                               EQU              0x560000a8
   21 00000000 4A000014 
                       INTOFFSET
                               EQU              0x4a000014  ;Ö¸³öIRQ ÖÐ¶ÏÇëÇóÔ´
                                                            
   22 00000000         
   23 00000000         ;ARM¹¤×÷Ä£Ê½¶¨Òå
   24 00000000 00000010 
                       USERMODE
                               EQU              0x10
   25 00000000 00000011 
                       FIQMODE EQU              0x11
   26 00000000 00000012 
                       IRQMODE EQU              0x12
   27 00000000 00000013 
                       SVCMODE EQU              0x13
   28 00000000 00000017 
                       ABORTMODE
                               EQU              0x17



ARM Macro Assembler    Page 2 


   29 00000000 0000001B 
                       UNDEFMODE
                               EQU              0x1b
   30 00000000 0000001F 
                       MODEMASK
                               EQU              0x1f
   31 00000000 000000C0 
                       NOINT   EQU              0xc0        ;0x0000 0000 1(Irq)
                                                            1(Fiq)00 0000 ¹ØÖÐ¶
                                                            Ï
   32 00000000         
   33 00000000         ;*******************************************************
                       **************************************************
   34 00000000         ;                                    EXPORT and EXTERNAL
                        REFERENCES
   35 00000000         ;*******************************************************
                       **************************************************/
   36 00000000                 IMPORT           OSRunning
   37 00000000                 IMPORT           OSTCBCur
   38 00000000                 IMPORT           OSTCBHighRdy
   39 00000000                 IMPORT           OSPrioCur
   40 00000000                 IMPORT           OSPrioHighRdy
   41 00000000                 IMPORT           OSIntNesting
   42 00000000         
   43 00000000         
   44 00000000                 IMPORT           OSIntEnter
   45 00000000                 IMPORT           OSIntExit
   46 00000000                 IMPORT           OSTaskSwHook
   47 00000000                 IMPORT           OSTimeTick
   48 00000000         
   49 00000000                 IMPORT           HandleEINT0
   50 00000000         
   51 00000000         
   52 00000000                 EXPORT           OSStartHighRdy
   53 00000000                 EXPORT           OSCtxSw
   54 00000000                 EXPORT           OSTickISR
   55 00000000                 EXPORT           OSIntCtxSw
   56 00000000         
   57 00000000                 EXPORT           OSCPUSaveSR
   58 00000000                 EXPORT           OSCPURestoreSR
   59 00000000         
   60 00000000                 EXPORT           OS_CPU_IRQ_ISR
   61 00000000         
   62 00000000                 PRESERVE8
   63 00000000                 AREA             UCOS_ARM, CODE, READONLY
   64 00000000         
   65 00000000         ;*******************************************************
                       **************************************************
   66 00000000         ;                                          START MULTITA
                       SKING
   67 00000000         ;                                       void OSStartHigh
                       Rdy(void) called by OSStart() 
   68 00000000         ;
   69 00000000         ; ÈÎÎñ¶ÑÕ»µÄ×éÖ¯ÈçÏÂ:
   70 00000000         ;
   71 00000000         ;           Entry Point(ÈÎÎñÃû PC)    (High memory)
   72 00000000         ;                               LR(R14)
   73 00000000         ;                               R12
   74 00000000         ;                               R11



ARM Macro Assembler    Page 3 


   75 00000000         ;                               R10
   76 00000000         ;                               R9
   77 00000000         ;                               R8
   78 00000000         ;                               R7
   79 00000000         ;                               R6
   80 00000000         ;                               R5
   81 00000000         ;                               R4
   82 00000000         ;                               R3
   83 00000000         ;                               R2
   84 00000000         ;                               R1
   85 00000000         ;                               R0 : argument
   86 00000000         ; OSTCBHighRdy->OSTCBStkPtr --> CPSR        (Low memory)
                       
   87 00000000         ;
   88 00000000         ; Note : OSStartHighRdy() MUST:
   89 00000000         ;           a) Call OSTaskSwHook() then,
   90 00000000         ;           b) Set OSRunning to TRUE,
   91 00000000         ;           c) Switch to the highest priority task.
   92 00000000         ;
   93 00000000         ;*******************************************************
                       *************************************************** */
   94 00000000         OSStartHighRdy
   95 00000000         ;-------------------------------------------------------
                       --------------------------- 
   96 00000000         ; OSRunning = TRUE;
   97 00000000         ;-------------------------------------------------------
                       --------------------------- 
   98 00000000         
   99 00000000 E32FF0D3        MSR              CPSR_cxsf,#SVCMODE|NOINT ;±£³ÖÎ
                                                            ªSVC(¹ÜÀíÄ£Ê½)²¢¹ØÖ
                                                            Ð¶Ï MRS ×¨ÃÅÓÃÓÚ×´Ì
                                                            ¬¼Ä´æÆ÷ºÍÍ¨ÓÃ¼Ä´æÆ÷
                                                            ¼äµÄÊý¾Ý´«Êä
  100 00000004         
  101 00000004 EBFFFFFE        BL               OSTaskSwHook ;µ÷ÓÃÓÃ»§¶¨ÒåµÄ sw
                                                            itchhook
  102 00000008         
  103 00000008 E59F018C        LDR              R0, =OSRunning ;¶ÁÈ¡OSRunningµÄ
                                                            µØÖ·
  104 0000000C E3A01001        MOV              R1, #1
  105 00000010 E5C01000        STRB             R1, [R0]    ; OSRunning =TRUE=1
                                                            
  106 00000014         
  107 00000014         ;-------------------------------------------------------
                       ---------------------------  
  108 00000014         ;   SP = OSTCBHighRdy->OSTCBStkPtr;´ËÊ±SPÖ¸ÏòÕ»¶¥CPSR
  109 00000014         ;-------------------------------------------------------
                       --------------------------- 
  110 00000014 E59F0184        LDR              R0, =OSTCBHighRdy
  111 00000018 E5900000        LDR              R0, [R0]
  112 0000001C E590D000        LDR              SP, [R0]
  113 00000020         
  114 00000020         ;-------------------------------------------------------
                       ---------------------------  
  115 00000020         ; »Ö¸´ÈÎÎñ
  116 00000020         ;-------------------------------------------------------
                       --------------------------- 
  117 00000020 E8BD0001        LDMFD            SP!, {R0}   ;µ¯³ö¶ÑÕ»µÄcpsrÊý¾Ý
                                                            



ARM Macro Assembler    Page 4 


  118 00000024 E16FF000        MSR              SPSR_cxsf, R0 ;ÉèÖÃ³ÌÐòµÄSPSR
  119 00000028 E8FDDFFF        LDMFD            SP!, {R0-R12, LR, PC}^ ;ÓÐ^ºó×º
                                                            Òª¸´ÖÆSPSR µ½CPSR
  120 0000002C         
  121 0000002C         
  122 0000002C         ;*******************************************************
                       ***************************************************
  123 0000002C         ;                                PERFORM A CONTEXT SWITC
                       H (From task level)
  124 0000002C         ;                                           void OSCtxSw
                       (void)                 
  125 0000002C         ;
  126 0000002C         ; Note(s):     1) Upon entry: 
  127 0000002C         ;                 OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  128 0000002C         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  129 0000002C         ;
  130 0000002C         ;              2) The stack frame of the task to suspend
                        looks as follows:
  131 0000002C         ;                                                   
  132 0000002C         ;                                                   PC  
                                       SP  (High memory)
  133 0000002C         ;               LR(R14)     
  134 0000002C         ;                                    R12
  135 0000002C         ;                                     R11
  136 0000002C         ;                                    R10
  137 0000002C         ;                                     R9
  138 0000002C         ;                                    R8
  139 0000002C         ;                                    R7
  140 0000002C         ;                                    R6
  141 0000002C         ;                                    R5
  142 0000002C         ;                                    R4
  143 0000002C         ;                                    R3
  144 0000002C         ;                                    R2
  145 0000002C         ;                                    R1
  146 0000002C         ;                                    R0
  147 0000002C         ;       OSTCBCur->OSTCBStkPtr ----> CPSR      (Low memor
                       y)
  148 0000002C         ;
  149 0000002C         ;
  150 0000002C         ;              3) The stack frame of the task to resume 
                       looks as follows:
  151 0000002C         ;
  152 0000002C         ;                 PC    (High memory)
  153 0000002C         ;                                                   LR(R
                       14) 
  154 0000002C         ;                                     R12
  155 0000002C         ;                                    R11
  156 0000002C         ;                                    R10
  157 0000002C         ;                                     R9
  158 0000002C         ;                                    R8
  159 0000002C         ;                                    R7
  160 0000002C         ;                                     R6
  161 0000002C         ;                                    R5
  162 0000002C         ;                                    R4
  163 0000002C         ;                                    R3
  164 0000002C         ;                                    R2
  165 0000002C         ;                                    R1



ARM Macro Assembler    Page 5 


  166 0000002C         ;                                     R0
  167 0000002C         ;      OSTCBHighRdy->OSTCBStkPtr ----> CPSR    SP (Low m
                       emory)
  168 0000002C         ;
  169 0000002C         ;               ²½Öè£º1.±£´æµ±Ç°ÈÎÎñµÄÉÏÏÂÎÄµ½ÆäµÄ¶ÑÕ»ÖÐ
                       
  170 0000002C         ;                      2.»Ö¸´¸ßÓÅÏÈ¼¶µÄÈÎÎñµÄÉÏÏÂÎÄ
  171 0000002C         ;                     3.·µ»Ø
  172 0000002C         ;
  173 0000002C         ;*******************************************************
                       **************************************************/
  174 0000002C         OSCtxSw
  175 0000002C         
  176 0000002C E92D4000        STMFD            SP!, {LR}   ;PC                
                                                              ;±£´æµ±Ç°ÈÎÎñµÄÉÏ
                                                            ÏÂÎÄ
  177 00000030 E92D5FFF        STMFD            SP!, {R0-R12, LR} ;R0-R12 LR
  178 00000034 E10F0000        MRS              R0,  CPSR   ;Push CPSR
  179 00000038 E92D0001        STMFD            SP!, {R0}
  180 0000003C         
  181 0000003C         ;-------------------------------------------------------
                       ---------------------------
  182 0000003C         ;   OSTCBCur->OSTCBStkPtr = SP  OSTCBStkPtr Ö¸ÏòÕ»¶¥
  183 0000003C         ;-------------------------------------------------------
                       ---------------------------  
  184 0000003C E59F0160        LDR              R0, =OSTCBCur
  185 00000040 E5900000        LDR              R0, [R0]
  186 00000044 E580D000        STR              SP, [R0]
  187 00000048         
  188 00000048         ;-------------------------------------------------------
                       ---------------------------  
  189 00000048         ;call OSTaskSwHook();
  190 00000048         ;-------------------------------------------------------
                       -------------------------- 
  191 00000048 EBFFFFFE        BL               OSTaskSwHook
  192 0000004C         
  193 0000004C         ;-------------------------------------------------------
                       ---------------------------   
  194 0000004C         ; OSTCBCur = OSTCBHighRdy;µ±Ç°ÈÎÎñÖ¸Ïò¸ßÓÅÏÈ¼¶ÈÎÎñµÄ¶ÑÕ»
                       
  195 0000004C         ;-------------------------------------------------------
                       ---------------------------  
  196 0000004C E59F014C        LDR              R0, =OSTCBHighRdy
  197 00000050 E59F114C        LDR              R1, =OSTCBCur
  198 00000054 E5900000        LDR              R0, [R0]
  199 00000058 E5810000        STR              R0, [R1]
  200 0000005C         
  201 0000005C         ;-------------------------------------------------------
                       ---------------------------  
  202 0000005C         ; OSPrioCur = OSPrioHighRdy;ÐÞ¸Äµ±Ç°ÈÎÎñµÄÓÅÏÈ¼¶
  203 0000005C         ;-------------------------------------------------------
                       ---------------------------  
  204 0000005C E59F0144        LDR              R0, =OSPrioHighRdy
  205 00000060 E59F1144        LDR              R1, =OSPrioCur
  206 00000064 E5D00000        LDRB             R0, [R0]
  207 00000068 E5C10000        STRB             R0, [R1]
  208 0000006C         
  209 0000006C         ;-------------------------------------------------------
                       ---------------------------  



ARM Macro Assembler    Page 6 


  210 0000006C         ;  SP=TCBHighRdy->OSTCBStkPtr;ÉèÖÃSP
  211 0000006C         ;-------------------------------------------------------
                       ---------------------------  
  212 0000006C E59F012C        LDR              R0, =OSTCBHighRdy
  213 00000070 E5900000        LDR              R0, [R0]
  214 00000074 E590D000        LDR              SP, [R0]
  215 00000078         
  216 00000078         ;-------------------------------------------------------
                       --------------------------- 
  217 00000078         ;»Ö¸´ÏÖ³¡
  218 00000078         ;-------------------------------------------------------
                       --------------------------- 
  219 00000078 E8BD0001        LDMFD            SP!, {R0}   ;POP CPSR
  220 0000007C E16FF000        MSR              SPSR_cxsf, R0
  221 00000080 E8FDDFFF        LDMFD            SP!, {R0-R12, LR, PC}^
  222 00000084         ;*******************************************************
                       **************************************************
  223 00000084         ;                                PERFORM A CONTEXT SWITC
                       H (From an ISR)
  224 00000084         ;                                        void OSIntCtxSw
                       (void)
  225 00000084         ;
  226 00000084         ; Description: 1) ÖÐ¶ÏÈÎÎñ·¢ÉúÊ±µÄÈÎÎñÉÏÏÂÎÄÇÐ»»,ÓÉÓÚÖÐ¶
                       Ï»á±£´æÏÖ³¡£¬¹Ê²»ÓÃÊÖ¶¯±£´æ
  227 00000084         ;
  228 00000084         ;              2) The stack frame of the task to suspend
                        looks as follows:
  229 00000084         ;
  230 00000084         ;               PC     (High memory)
  231 00000084         ;                                                   LR(R
                       14)
  232 00000084         ;                                    R12
  233 00000084         ;                                     R11
  234 00000084         ;                                    R10
  235 00000084         ;                                     R9
  236 00000084         ;                                    R8
  237 00000084         ;                                    R7
  238 00000084         ;                                    R6
  239 00000084         ;                                    R5
  240 00000084         ;                                    R4
  241 00000084         ;                                    R3
  242 00000084         ;                                    R2
  243 00000084         ;                                    R1
  244 00000084         ;                                    R0
  245 00000084         ;                                    
  246 00000084         ;       OSTCBCur->OSTCBStkPtr ----> CPSR     (Low memory
                       )
  247 00000084         ;
  248 00000084         ;
  249 00000084         ;              3) The stack frame of the task to resume 
                       looks as follows:
  250 00000084         ;
  251 00000084         ;                 PC     (High memory)
  252 00000084         ;                                                   LR(R
                       14) 
  253 00000084         ;                                     R12
  254 00000084         ;                                    R11
  255 00000084         ;                                    R10
  256 00000084         ;                                     R9



ARM Macro Assembler    Page 7 


  257 00000084         ;                                    R8
  258 00000084         ;                                    R7
  259 00000084         ;                                     R6
  260 00000084         ;                                    R5
  261 00000084         ;                                    R4
  262 00000084         ;                                    R3
  263 00000084         ;                                    R2
  264 00000084         ;                                    R1
  265 00000084         ;                                     R0
  266 00000084         ;      OSTCBHighRdy->OSTCBStkPtr ----> CPSR     (Low mem
                       ory)
  267 00000084         ;          ²½Öè£º      
  268 00000084         ;                      1.»Ö¸´¸ßÓÅÏÈ¼¶µÄÈÎÎñµÄÉÏÏÂÎÄ
  269 00000084         ;                      2.·µ»Ø
  270 00000084         ;*******************************************************
                       **************************************************/
  271 00000084         OSIntCtxSw
  272 00000084         ;-------------------------------------------------------
                       ---------------------------  
  273 00000084         ; Call OSTaskSwHook();
  274 00000084         ;-------------------------------------------------------
                       --------------------------- 
  275 00000084 EBFFFFFE        BL               OSTaskSwHook
  276 00000088         
  277 00000088         ;-------------------------------------------------------
                       ---------------------------   
  278 00000088         ; OSTCBCur = OSTCBHighRdy;
  279 00000088         ;-------------------------------------------------------
                       ---------------------------  
  280 00000088 E59F0110        LDR              R0, =OSTCBHighRdy
  281 0000008C E59F1110        LDR              R1, =OSTCBCur
  282 00000090 E5900000        LDR              R0, [R0]
  283 00000094 E5810000        STR              R0, [R1]
  284 00000098         
  285 00000098         ;-------------------------------------------------------
                       ---------------------------  
  286 00000098         ; OSPrioCur = OSPrioHighRdy;
  287 00000098         ;-------------------------------------------------------
                       ---------------------------  
  288 00000098 E59F0108        LDR              R0, =OSPrioHighRdy
  289 0000009C E59F1108        LDR              R1, =OSPrioCur
  290 000000A0 E5D00000        LDRB             R0, [R0]
  291 000000A4 E5C10000        STRB             R0, [R1]
  292 000000A8         
  293 000000A8         ;-------------------------------------------------------
                       ---------------------------  
  294 000000A8         ;   SP = OSTCBHighRdy->OSTCBStkPtr;
  295 000000A8         ;-------------------------------------------------------
                       ---------------------------  
  296 000000A8 E59F00F0        LDR              R0, =OSTCBHighRdy
  297 000000AC E5900000        LDR              R0, [R0]
  298 000000B0 E590D000        LDR              SP, [R0]
  299 000000B4         
  300 000000B4         ;-------------------------------------------------------
                       --------------------------- 
  301 000000B4         ;»Ö¸´ÏÖ³¡
  302 000000B4         ;-------------------------------------------------------
                       --------------------------- 
  303 000000B4 E8BD0001        LDMFD            SP!, {R0}   ;POP CPSR



ARM Macro Assembler    Page 8 


  304 000000B8 E16FF000        MSR              SPSR_cxsf, R0
  305 000000BC E8FDDFFF        LDMFD            SP!, {R0-R12, LR, PC}^
  306 000000C0         
  307 000000C0         
  308 000000C0         
  309 000000C0         ;*******************************************************
                       **************************************************
  310 000000C0         ;                                            TICK HANDLE
                       R
  311 000000C0         ;
  312 000000C0         ; Description:  
  313 000000C0         ;     This handles all the Timer0(INT_TIMER0) interrupt 
                       which is used to generate the uC/OS-II tick.
  314 000000C0         ;*******************************************************
                       **************************************************/
  315 000000C0         
  316 000000C0         OSTickISR
  317 000000C0 E1A0600E        MOV              R6,LR
  318 000000C4 E3A01001        MOV              R1, #1
  319 000000C8 E1A01501        MOV              R1, R1, LSL #10 ; Timer0 Source
                                                             Pending Reg.
  320 000000CC E3A0044A        LDR              R0, =SRCPND
  321 000000D0 E5902000        LDR              R2, [R0]
  322 000000D4 E1811002        ORR              R1, R1,R2   ;SRCPND¼Ä´æÆ÷µÚ10Î»
                                                            ÖÃ1£¬Çå³ýÖÐ¶ÏÇëÇó
  323 000000D8 E5801000        STR              R1, [R0]
  324 000000DC         
  325 000000DC E59F00CC        LDR              R0, =INTPND
  326 000000E0 E5901000        LDR              R1, [R0]
  327 000000E4 E5801000        STR              R1, [R0]
  328 000000E8         
  329 000000E8         ;-------------------------------------------------------
                       ---------------------------  
  330 000000E8         ; OSTimeTick();
  331 000000E8         ;-------------------------------------------------------
                       --------------------------- 
  332 000000E8 EBFFFFFE        BL               OSTimeTick
  333 000000EC         
  334 000000EC         
  335 000000EC E1A0F006        MOV              PC, R6      ; Return  
  336 000000F0         
  337 000000F0         ;-------------------------------------------------------
                       --------------------------- 
  338 000000F0         ; ÖÐ¶Ï·þÎñ³ÌÐò¹ý³Ì
  339 000000F0         ; 1¡¢ »á°Ñµ±Ç°µÄCPSRµÄÖµ¿½±´µ½SPSR_irq
  340 000000F0         
  341 000000F0         ;2¡¢ °ÑPCµÄÖµ¿½±´µ½LR_irq
  342 000000F0         
  343 000000F0         ;3¡¢ Ç¿ÖÆ½øÈëIRQÒì³£Ä£Ê½
  344 000000F0         
  345 000000F0         ;4¡¢ Ç¿ÖÆ½øÈëARM×´Ì¬
  346 000000F0         
  347 000000F0         ;5¡¢ ½ûÖ¹IRQÖÐ¶Ï
  348 000000F0         
  349 000000F0         ;6¡¢ PC=0X18(»ò¸ßÎ»µØÖ·µÄ0xff18)£¬Ìø×ªµ½OS_CPU_IRQ_ISR´¦
                       
  350 000000F0         
  351 000000F0         ;ÉÏÃæÕâÐ©¶¼ÊÇÓ²¼þ×Ô¶¯Íê³ÉµÄ¡£
  352 000000F0         ;-------------------------------------------------------



ARM Macro Assembler    Page 9 


                       --------------------------- 
  353 000000F0         
  354 000000F0         OS_CPU_IRQ_ISR
  355 000000F0         
  356 000000F0 E92D000E        STMFD            SP!, {R1-R3} ; We will use R1-R
                                                            3 as temporary regi
                                                            sters ´ËÊ±ÒÑ¾­ÊÇIRQ
                                                            ÏÂµÄ¶ÑÕ»ÁË
  357 000000F4         ;-------------------------------------------------------
                       ---------------------
  358 000000F4         ;   R1--SP
  359 000000F4         ; R2--PC 
  360 000000F4         ;   R3--SPSR
  361 000000F4         ;irqMode use R13_irq(sp) R14_irq(LR) SPSR_irq
  362 000000F4         ;-------------------------------------------------------
                       -----------------
  363 000000F4 E1A0100D        MOV              R1, SP
  364 000000F8 E28DD00C        ADD              SP, SP, #12 ;Ö¸»ØIRQµÄ¶ÑÕ»Õ»µ×£
                                                            ¬ÒòÎª´Ëºó²»»á¶ÔIRQ¶
                                                            ÑÕ»µÄÖ±½Ó²Ù×÷ÁË£¬Òª
                                                            ±£³ÖR13_irqµÄÖµÊÇÕý
                                                            È·µÄ
  365 000000FC E24E2004        SUB              R2, LR, #4  ;ÒòÎªÖÐ¶ÏÊÇ·¢ÉúÔÚÒ»
                                                            ÌõÖ¸ÁîÖ´ÐÐÍêÊ±PCÒÑ¾
                                                            ­Ö¸ÏòÁËµ±Ç°Ö¸ÁîµÄÏÂ
                                                            Á½Ìõ£¬¹Ê·µ»ØµØÖ·ÊÇL
                                                            R_irq-#4,ÕâÀï¼õ4ºÍA
                                                            RMµÄ3¼¶Á÷Ë®ÏßÈ¡Ö¸ÓÐ
                                                            ¹ØÏµ
  366 00000100         
  367 00000100 E14F3000        MRS              R3, SPSR    ; ¸´ÖÆSPSR ( CPSR)
  368 00000104         
  369 00000104         
  370 00000104         ;*******************************************save context
                       **************************************************
  371 00000104         
  372 00000104 E32FF0D3        MSR              CPSR_cxsf, #SVCMODE|NOINT ;»Øµ½
                                                            ¹ÜÀíÄ£Ê½SVC,Ê¹spÖØÐ
                                                            ÂÖ¸ÏòSVCµÄÈÎÎñµÄ¶ÑÕ
                                                            »£¨R13_SVC£©
  373 00000108         
  374 00000108         ; ±£´æ±»ÖÐ¶ÏÈÎÎñµÄÉÏÏÂÎÄ£¬ÔÚÔ­À´SVCµÄ¶ÑÕ»Àï
  375 00000108         
  376 00000108 E92D0004        STMFD            SP!, {R2}   ; ÈÎÎñ PC  ÈëÕ»
  377 0000010C E92D5FF0        STMFD            SP!, {R4-R12, LR} 
                                                            ;  LR,R12-R4ÈëÕ»
  378 00000110         
  379 00000110 E8B10070        LDMFD            R1!, {R4-R6} ;°Ñ·ÅÔÚIRQ¶ÑÕ»ÖÐµÄ
                                                             R1-R3 È¡»ØÀ´ 
  380 00000114 E92D0070        STMFD            SP!, {R4-R6} ; R1-R3 ÈëSVCÕ»
  381 00000118 E92D0001        STMFD            SP!, {R0}   ; R0ÈëÕ»
  382 0000011C         
  383 0000011C E92D0008        STMFD            SP!, {R3}   ;  CPSRÈëÕ»
  384 00000120         ;*******************************************************
                       **************************************************
  385 00000120         ;             ÖÐ¶Ï·þÎñ
  386 00000120 E59F008C        LDR              R0,=OSIntNesting ;OSIntNesting+
                                                            + ÖÐ¶ÏÇ¶Ì×¼ÆÊý
  387 00000124 E5D01000        LDRB             R1,[R0]



ARM Macro Assembler    Page 10 


  388 00000128 E2811001        ADD              R1,R1,#1
  389 0000012C E5C01000        STRB             R1,[R0]
  390 00000130         
  391 00000130 E3510001        CMP              R1,#1       ;if(OSIntNesting==1
                                                            ){
  392 00000134 1A000002        BNE              OS_CPU_IRQ_ISR_1
  393 00000138         
  394 00000138 E59F4064        LDR              R4,=OSTCBCur ;OSTCBHighRdy->OST
                                                            CBStkPtr=SP;ÇÐ»»¸ßÓ
                                                            ÅÏÈ¼¶ÈÎÎñ
  395 0000013C E5945000        LDR              R5,[R4]
  396 00000140 E585D000        STR              SP,[R5]     ;}
  397 00000144         ;*******************************************************
                       **************************************************
  398 00000144         
  399 00000144         OS_CPU_IRQ_ISR_1
  400 00000144 E321F0D2        MSR              CPSR_c,#IRQMODE|NOINT ;»Øµ½IRQÄ
                                                            £Ê½£¬Ê¹ÓÃIRQ¶ÑÕ»£¬´
                                                            ¦ÀíÖÐ¶Ï
  401 00000148         
  402 00000148 E59F0068        LDR              R0, =INTOFFSET
  403 0000014C E5900000        LDR              R0, [R0]
  404 00000150         
  405 00000150 E59F1018        LDR              R1, IRQIsrVect
  406 00000154 E1A0E00F        MOV              LR, PC      ; ±£´æ·µ»ØµØÖ·µ½LR_
                                                            irq
  407 00000158 E791F100        LDR              PC, [R1, R0, LSL #2] ; Call OS_
                                                            CPU_IRQ_ISR_handler
                                                            ();   ((R1)+(R0)<<2
                                                            )->PC ;pc Ã¿´Î¼Ó4
  408 0000015C         
  409 0000015C E321F0D3        MSR              CPSR_c,#SVCMODE|NOINT 
                                                            ;»Øµ½ SVC mode
  410 00000160 EBFFFFFE        BL               OSIntExit   ;Call OSIntExit ×¼±
                                                            ¸ÖÐ¶ÏÍË³ö
  411 00000164         
  412 00000164 E8BD0010        LDMFD            SP!,{R4}    ;POP the task''s CP
                                                            SR 
  413 00000168 E16FF004        MSR              SPSR_cxsf,R4
  414 0000016C E8FDDFFF        LDMFD            SP!,{R0-R12,LR,PC}^ ;POP new Ta
                                                            sk''s context
  415 00000170         
  416 00000170 00000000 
                       IRQIsrVect
                               DCD              HandleEINT0
  417 00000174         
  418 00000174         ;*******************************************************
                       **************************************************
  419 00000174         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
  420 00000174         ;
  421 00000174         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
  422 00000174         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
  423 00000174         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II''s functions that need to 
  424 00000174         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'



ARM Macro Assembler    Page 11 


  425 00000174         ;              into the CPU''s status register.
  426 00000174         ;
  427 00000174         ; Prototypes : OS_CPU_SR  OSCPUSaveSR(void);
  428 00000174         ;              void       OSCPURestoreSR(OS_CPU_SR cpu_s
                       r);
  429 00000174         ;
  430 00000174         ;
  431 00000174         ; Note(s)    : 1) These functions are used in general li
                       ke this:
  432 00000174         ;
  433 00000174         ;                 void Task (void *p_arg)
  434 00000174         ;                 {
  435 00000174         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
  436 00000174         ;                     OS_CPU_SR  cpu_sr;
  437 00000174         ;                 #endif
  438 00000174         ;
  439 00000174         ;                          :
  440 00000174         ;                          :
  441 00000174         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OSCPUSaveSR();                */
  442 00000174         ;                          :
  443 00000174         ;                          :
  444 00000174         ;                     OS_EXIT_CRITICAL();              /
                       * OSCPURestoreSR(cpu_sr);                */
  445 00000174         ;                          :
  446 00000174         ;                          :
  447 00000174         ;                 }
  448 00000174         ;
  449 00000174         ;              2) OSCPUSaveSR() is implemented as recomm
                       ended by Atmel''s application note:
  450 00000174         ;
  451 00000174         ;                    "Disabling Interrupts at Processor 
                       Level"
  452 00000174         ;*******************************************************
                       **************************************************
  453 00000174         OSCPUSaveSR
  454 00000174 E10F0000        MRS              R0, CPSR    ; Set IRQ and FIQ b
                                                            its in CPSR to disa
                                                            ble all interrupts
  455 00000178 E38010C0        ORR              R1, R0, #0xC0
  456 0000017C E121F001        MSR              CPSR_c, R1
  457 00000180 E10F1000        MRS              R1, CPSR    ; Confirm that CPSR
                                                             contains the prope
                                                            r interrupt disable
                                                             flags
  458 00000184 E20110C0        AND              R1, R1, #0xC0
  459 00000188 E35100C0        CMP              R1, #0xC0
  460 0000018C 1AFFFFFE        BNE              OSCPUSaveSR ; Not properly disa
                                                            bled (try again)
  461 00000190 E1A0F00E        MOV              PC, LR      ; Disabled, return 
                                                            the original CPSR c
                                                            ontents in R0
  462 00000194         
  463 00000194         OSCPURestoreSR
  464 00000194 E121F000        MSR              CPSR_c, R0
  465 00000198 E1A0F00E        MOV              PC, LR
  466 0000019C         
  467 0000019C                 END



ARM Macro Assembler    Page 12 


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              4A000010 
              00000000 
              4A000014 
Command Line: --debug --xref --cpu=ARM920T --apcs=interwork --depend=.\obj\Os_c
pu_a.d -o.\obj\Os_cpu_a.o -IG:\keil4.22\ARM\CMSIS\Include -IG:\keil4.22\ARM\INC
\Samsung --predefine="__EVAL SETA 1" --list=.\lst\Os_cpu_a.lst ..\uCOS_II\arm\O
s_cpu_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

IRQIsrVect 00000170

Symbol: IRQIsrVect
   Definitions
      At line 416 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 405 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: IRQIsrVect used once
OSCPURestoreSR 00000194

Symbol: OSCPURestoreSR
   Definitions
      At line 463 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 58 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSCPURestoreSR used once
OSCPUSaveSR 00000174

Symbol: OSCPUSaveSR
   Definitions
      At line 453 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 57 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 460 in file ..\uCOS_II\arm\Os_cpu_a.s

OSCtxSw 0000002C

Symbol: OSCtxSw
   Definitions
      At line 174 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 53 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSCtxSw used once
OSIntCtxSw 00000084

Symbol: OSIntCtxSw
   Definitions
      At line 271 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 55 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSIntCtxSw used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 94 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 52 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSStartHighRdy used once
OSTickISR 000000C0

Symbol: OSTickISR
   Definitions
      At line 316 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 54 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSTickISR used once
OS_CPU_IRQ_ISR 000000F0




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: OS_CPU_IRQ_ISR
   Definitions
      At line 354 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 60 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OS_CPU_IRQ_ISR used once
OS_CPU_IRQ_ISR_1 00000144

Symbol: OS_CPU_IRQ_ISR_1
   Definitions
      At line 399 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 392 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OS_CPU_IRQ_ISR_1 used once
UCOS_ARM 00000000

Symbol: UCOS_ARM
   Definitions
      At line 63 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: UCOS_ARM unused
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ABORTMODE 00000017

Symbol: ABORTMODE
   Definitions
      At line 28 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: ABORTMODE unused
FIQMODE 00000011

Symbol: FIQMODE
   Definitions
      At line 25 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: FIQMODE unused
INTOFFSET 4A000014

Symbol: INTOFFSET
   Definitions
      At line 21 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 402 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: INTOFFSET used once
INTPND 4A000010

Symbol: INTPND
   Definitions
      At line 16 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 325 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: INTPND used once
IRQMODE 00000012

Symbol: IRQMODE
   Definitions
      At line 26 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 400 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: IRQMODE used once
MODEMASK 0000001F

Symbol: MODEMASK
   Definitions
      At line 30 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: MODEMASK unused
NOINT 000000C0

Symbol: NOINT
   Definitions
      At line 31 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 99 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 372 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 400 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 409 in file ..\uCOS_II\arm\Os_cpu_a.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

SRCPND 4A000000

Symbol: SRCPND
   Definitions
      At line 15 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 320 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: SRCPND used once
SVCMODE 00000013

Symbol: SVCMODE
   Definitions
      At line 27 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 99 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 372 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 409 in file ..\uCOS_II\arm\Os_cpu_a.s

UNDEFMODE 0000001B

Symbol: UNDEFMODE
   Definitions
      At line 29 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: UNDEFMODE unused
USERMODE 00000010

Symbol: USERMODE
   Definitions
      At line 24 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: USERMODE unused
rEINTPEND 560000A8

Symbol: rEINTPEND
   Definitions
      At line 20 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: rEINTPEND unused
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

HandleEINT0 00000000

Symbol: HandleEINT0
   Definitions
      At line 49 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 416 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: HandleEINT0 used once
OSIntEnter 00000000

Symbol: OSIntEnter
   Definitions
      At line 44 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      None
Comment: OSIntEnter unused
OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 45 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 410 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSIntExit used once
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 41 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 386 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSIntNesting used once
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 39 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 205 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 289 in file ..\uCOS_II\arm\Os_cpu_a.s

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 40 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 204 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 288 in file ..\uCOS_II\arm\Os_cpu_a.s

OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 36 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 103 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSRunning used once
OSTCBCur 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: OSTCBCur
   Definitions
      At line 37 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 184 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 197 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 281 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 394 in file ..\uCOS_II\arm\Os_cpu_a.s

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 38 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 110 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 196 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 212 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 280 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 296 in file ..\uCOS_II\arm\Os_cpu_a.s

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 46 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 101 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 191 in file ..\uCOS_II\arm\Os_cpu_a.s
      At line 275 in file ..\uCOS_II\arm\Os_cpu_a.s

OSTimeTick 00000000

Symbol: OSTimeTick
   Definitions
      At line 47 in file ..\uCOS_II\arm\Os_cpu_a.s
   Uses
      At line 332 in file ..\uCOS_II\arm\Os_cpu_a.s
Comment: OSTimeTick used once
11 symbols
366 symbols in table
